#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var program = require('commander');
var chalk = require('chalk');
var prettyTime = require('pretty-hrtime');
var shelljs = require('shelljs');
var readlineSync = require('readline-sync');
var _ = require('underscore');
var nconf = require('nconf');
var moment = require('moment');
var pkg = require('../package.json');

var version = pkg.version;
var executeDirPath = path.resolve('.');
var gulpfilePath = path.normalize(__dirname + "/../gulp/gulpfile.js");
var gmeteorJsonPath = path.normalize(executeDirPath + '/gmeteor.json');
var _exit = process.exit;
var NTimer = {
  actionTime: {},
  start: function(action) {
    var currentTime = new Date();
    this.actionTime[action] = process.hrtime();
    console.log(log("[%s] Starting '%s'..."), moment(currentTime).format("HH:mm:ss"), action);
  },
  end: function(action) {
    if(!this.actionTime[action]) {
      return;
    }
    var currentTime = new Date();
    var timeDiff = process.hrtime(this.actionTime[action]);
    this.actionTime[action] = null;
    console.log(log("[%s] Finished '%s' after %s"), moment(currentTime).format("HH:mm:ss"), action, prettyTime(timeDiff));
  }
};
var error = chalk.bold.red;
var warn = chalk.bold.yellow;
var log = chalk.bold.green;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit;

if(!fs.existsSync(gmeteorJsonPath)) {
  console.log(error("need gmeteor.json file"));
  exit(1);
  return;
}

nconf.argv().env().file({file: gmeteorJsonPath}).defaults({
  "mup": {"path": "deploy/production"},
  "meteor": {"path": "backend"},
  "frontend": {"path": "frontend"},
  "env": process.env.NODE_ENV,
  "test": false
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('-s, --source', 'gmeteor option file (defaults to gmeteor.json)')
  .option('-f, --force', 'force on non-empty directory')

program
  .command('run [target]')
  .description('run meteor project')
  .option("--test", "test enabled")
  .action(_.partial(actionRun, 'run'));

program
  .command('debug [target]')
  .description('debug meteor project')
  .option("--test", "test enabled")
  .action(_.partial(actionRun, 'debug'));

program
  .command('build [action]')
  .description('build')
  .action(actionBuild);

program
  .command('deploy')
  .description('deploy meteor project')
  .action(actionDeploy);

program
  .command('gulp [task]')
  .description('gulp wrapper')
  .action(actionGulp);

program
  .command('mup')
  .description('mup wrapper')
  .action(actionMup);

program
  .command('meteor')
  .description('meteor wrapper')
  .action(actionMeteor);

program
  .command('install')
  .description('install')
  .action(actionInstall);

program
  .command('*')
  .action(function() {
    console.log(error('not found command'));
  });

program.parse(process.argv);

function processMeteorBuild() {
  NTimer.start("gmeteor build");

  var options = {
    buildPath: getAbsolutePath(nconf.get("mobile:buildPath")),
    server: nconf.get("production:rootUrl"),
    settings: getAbsolutePath(nconf.get("production:settings"))
  };
  shelljs.cd(getAbsolutePath(nconf.get("meteor:path")));
  shelljs.exec(_.template("meteor build <%=buildPath%> --server <%=server%> --mobile-settings <%=settings%>")(options));

  NTimer.end("gmeteor build");
}

function processJasrsigner() {
  NTimer.start("jarsigner");

  var options = {
    "appname": nconf.get("production:name"),
    "keystore": getAbsolutePath(nconf.get("mobile:keystore")),
    "storepass": nconf.get("mobile:storepass") || readlineSync.question('type storepass : ', {hideEchoBack: true})
  };
  shelljs.cd(getAbsolutePath(nconf.get("mobile:buildPath") + "/android"));
  shelljs.exec(_.template("jarsigner -keystore <%=keystore %> -verbose -sigalg SHA1withRSA -digestalg SHA1 -storepass <%=storepass%> unaligned.apk <%=appname %>")(options));

  NTimer.end("jarsigner");
}

function processZipalign() {
  NTimer.start("zipalign");

  var options = {
    apkPath: getAbsolutePath(nconf.get("mobile:apkPath"))
  };
  var execStr = _.template("~/.meteor/android_bundle/android-sdk/build-tools/20.0.0/zipalign -f 4 unaligned.apk <%=apkPath%>")(options);
  shelljs.cd(getAbsolutePath(nconf.get("mobile:buildPath") + "/android"));
  shelljs.exec(execStr);

  NTimer.end("zipalign");
}

function processMeteorRun(action, target) {
  action = action || "run";
  NTimer.start("meteor " + action);

  var option = {
    action: action || "run",
    target: target || "",
    server: nconf.get("development:rootUrl") || "http://localhost",
    port: nconf.get("development:port"),
    settings: getAbsolutePath(nconf.get("development:settings"))
  };
  var disabledTest = [
    "JASMINE_SERVER_UNIT=0",
    "JASMINE_SERVER_INTEGRATION=0",
    "JASMINE_CLIENT_UNIT=0",
    "JASMINE_CLIENT_INTEGRATION=0"
  ].join(" ");
  var execStr = _.template('meteor <%=action%> <%=target %> -p <%=port%> --mobile-server=<%=server%> --settings <%=settings %>')(option);
  shelljs.cd(getAbsolutePath(nconf.get("meteor:path")));
  shelljs.exec((nconf.get("test") ? "" : disabledTest + " ") + execStr);

  NTimer.end("meteor " + action);
}

function processByCommand(exec, command) {
  var execStr = exec + " " + command + " " + process.argv.slice(4).join(" ");
  NTimer.start(execStr);
  shelljs.cd(getAbsolutePath(nconf.get(exec + ":path")));
  shelljs.exec(execStr);
  NTimer.end(execStr);
}

function processPreprocess(phase) {
  shelljs.cp("-f", getAbsolutePath("deploy/" + phase + "/mobile-config.js"), getAbsolutePath(nconf.get("meteor:path")));
}

function getAbsolutePath(sourcePath) {
  if(sourcePath && sourcePath.indexOf("/") !== 0) {
    sourcePath = path.normalize(executeDirPath + "/" + sourcePath);
  }
  return sourcePath;
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if(!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream) {
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

function actionRun(command, target) {
  NTimer.start("gmeteor " + command);
  processPreprocess('development');
  processMeteorRun(command, target);
  NTimer.end("gmeteor " + command);
}

function actionBuild(action) {
  NTimer.start("gmeteor build");
  processPreprocess('production');
  actionGulp('gulp:production');
  processMeteorBuild();
  if(action === 'android') {
    processJasrsigner();
    processZipalign();
  }
  NTimer.end("gmeteor build");
}

function actionDeploy() {
  NTimer.start("gmeteor deploy");
  processPreprocess('production');
  actionGulp('gulp:production');
  processByCommand("mup", "deploy");
  NTimer.end("gmeteor deploy");
}

function actionMup(command) {
  NTimer.start("mup");
  processByCommand("mup", command);
  NTimer.end("mup");
}

function actionMeteor(command) {
  NTimer.start("meteor");
  processByCommand("meteor", command);
  NTimer.end("meteor");
}

function actionGulp(task) {
  var execStr = "gulp --gulpfile " + gulpfilePath + " --cwd " + executeDirPath + " " + (task || "") + " " + process.argv.slice(4).join(" ");
  NTimer.start("gulp");
  shelljs.exec(execStr);
  NTimer.end("gulp");
}

function actionInstall() {
  NTimer.start("gmeteor install");

  shelljs.cd(getAbsolutePath(nconf.get("frontend:path")));
  shelljs.exec("bower install");

  NTimer.end("gmeteor install");
}

