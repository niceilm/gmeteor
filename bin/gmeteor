#!/usr/bin/env node

var util = require('util');
var check = require('meteor-check').check;
var Match = require('meteor-check').Match;
var moment = require('moment');
var path = require('path');
var async = require('async');
var fs = require('fs');
var program = require('commander');
var shelljs = require('shelljs');
var readlineSync = require('readline-sync');
var _ = require('lodash');
var nconf = require('nconf');
var Logger = require('fl-logger');
var pkg = require('../package.json');

var Utils = require('../lib/utils');

var version = pkg.version;
var executeDirPath = path.resolve('.');
var gulpfilePath = path.normalize(__dirname + "/../gulp/gulpfile.js");
var _exit = process.exit;
var gulpExec = "gulp --gulpfile " + gulpfilePath + " --color --cwd " + executeDirPath;

var developmentPhase = "local";
var productionPhase = "real";
var supportPhase = ["local", "real"];
var rxSupportPhase = new RegExp("^(" + supportPhase.join("|") + ")$");
var gmeteorJson = null;
var gmeteorLoadError = null;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit;

nconf.argv().env().defaults({
  "test": false
});
var firstCommand = nconf.get("_")[0];
var isDebugMode = nconf.get("DEBUG");
var isHelpMode = nconf.get("help") || nconf.get("h");

Logger.setDebug(isDebugMode);


try {
  gmeteorJson = require("../lib/load-gmeteor-json");
  supportPhase = _.filter(fs.readdirSync(gmeteorJson.info.path.deploy), _.negate(_.partial(_.startsWith, _, ".")));
  rxSupportPhase = new RegExp("^(" + supportPhase.join("|") + ")$");
  developmentPhase = gmeteorJson.info.development;
  productionPhase = gmeteorJson.info.production;
} catch(ex) {
  gmeteorLoadError = ex;
}

program.version(version).usage("<command>").allowUnknownOption(true);

program
  .command("create <path>")
  .description('Create gmeteor project')
  .option('--force -f', 'gmeteor - force create if folder exists')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionCreate);

program
  .command('install')
  .description('Install local development')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionInstall);

program
  .command('run [target]')
  .description('Run local development')
  .option('--enable-test', 'gmeteor - enable test mode')
  .option('--phase <phase>', 'gmeteor - phase', rxSupportPhase, developmentPhase)
  .option('--disable-watch', 'gulp - disable watch mode')
  .option('--production', 'meteor|gulp - Simulate production mode. Minify and bundle CSS and JS files.')
  .option('--port <port>', 'meteor - Port to listen on (instead of the default 3000). Also uses port N+1 and a port specified by --app-port. Specify as --port=host:port to bind to a specific interface')
  .option('--debug-port <debug-port>', 'meteor - Specify a port to enable server-side debugging. The server will be paused at startup, waiting for incoming connections from debugger clients on the specified port.')
  .option('--mobile-server <mobile-server>', 'meteor - Location where mobile builds connect to the Meteor server. Defaults to your local IP and the port that the Meteor server binds to. Can include a URL scheme (for example, --mobile-server=https://example.com:443).')
  .option('--raw-logs', 'meteor - Run without parsing logs from stdout and stderr.')
  .option('--settings <settings>', 'meteor - Set optional data for Meteor.settings on the server.')
  .option('--verbose', 'meteor - Print all output from builds logs.')
  .option('--no-lint', "meteor - Don't run linters used by the app on every rebuild.")
  .option('--allow-incompatible-update', 'meteor - Allow packages in your project to be upgraded or downgraded to versions that are potentially incompatible with the current versions, if required to satisfy all package version constraints.')
  .option('--test', 'meteor - [Experimental] Run Velocity tests using phantomjs and exit.')
  .action(isHelpMode ? _.noop : _.partial(actionRun, 'run'))
  .allowUnknownOption(true)
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ gmeteor run');
    console.log('    $ gmeteor run android');
    console.log('    $ gmeteor run ios');
    console.log('    $ gmeteor run android --mobile-server http://somedomain.com:80');
    console.log();
  });

program
  .command('debug [target]')
  .description('Run local development with debug mode')
  .option('--enable-test', 'gmeteor - enable test mode')
  .option('--phase <phase>', 'gmeteor - phase', rxSupportPhase, developmentPhase)
  .option('--disable-watch', 'gulp - disable watch mode')
  .option('--production', 'meteor|gulp - Simulate production mode. Minify and bundle CSS and JS files.')
  .option('--port <port>', 'meteor - Port to listen on (instead of the default 3000). Also uses port N+1 and a port specified by --app-port. Specify as --port=host:port to bind to a specific interface')
  .option('--debug-port <debug-port>', 'meteor - Specify a port to enable server-side debugging. The server will be paused at startup, waiting for incoming connections from debugger clients on the specified port.')
  .option('--mobile-server <mobile-server>', 'meteor - Location where mobile builds connect to the Meteor server. Defaults to your local IP and the port that the Meteor server binds to. Can include a URL scheme (for example, --mobile-server=https://example.com:443).')
  .option('--raw-logs', 'meteor - Run without parsing logs from stdout and stderr.')
  .option('--settings <settings>', 'meteor - Set optional data for Meteor.settings on the server.')
  .option('--verbose', 'meteor - Print all output from builds logs.')
  .option('--no-lint', "meteor - Don't run linters used by the app on every rebuild.")
  .option('--allow-incompatible-update', 'meteor - Allow packages in your project to be upgraded or downgraded to versions that are potentially incompatible with the current versions, if required to satisfy all package version constraints.')
  .option('--test', 'meteor - [Experimental] Run Velocity tests using phantomjs and exit.')
  .action(isHelpMode ? _.noop : _.partial(actionRun, 'debug'))
  .allowUnknownOption(true)
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ gmeteor debug');
    console.log('    $ gmeteor debug android');
    console.log('    $ gmeteor debug ios');
    console.log('    $ gmeteor debug android --mobile-server http://somedomain.com:80');
    console.log();
  });

program
  .command('setup [phase]')
  .description('Set up server for deploy')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionSetup);

program
  .command('deploy [phase]')
  .description('Deploy the project in your current directory to server')
  .option('--disable-production', 'gmeteor - disabled production mode')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionDeploy);

program
  .command('build [phase]')
  .description('Package this project up for deployment')
  .option('--android', 'gmeteor - android jarsign and zipalign')
  .option('--appname <appname>', 'gmeteor - appname')
  .option('--keystore <keystore>', 'gmeteor - keystore')
  .option('--storepass <storepass>', 'gmeteor - storepass')
  .option('--apkpath <apkpath>', 'gmeteor - apkpath')
  .option('--disable-production', 'gmeteor - disabled production mode')
  .option('--debug', "meteor - Build in debug mode (don't minify, etc).")
  .option('--directory <directory>', "meteor - Output a directory (rather than a tarball) for the application server bundle. If the output location exists, it will be recursively deleted first.")
  .option('--mobile-settings <mobile-settings>', "meteor - Set optional data for the initial value of Meteor.settings in your mobile application. A new value for Meteor.settings can be set later by the server as part of hot code push.")
  .option('--server <server>', "meteor - Location where mobile builds connect to the Meteor server. Defaults to localhost:3000. Can include a URL scheme(for example, --server=https://example.com:443).")
  .option('--architecture <architecture>', "meteor - Builds the server for a different architecture than your developer machine's architecture. Valid architectures include os.osx.x86_64, os.linux.x86_64, and os.linux.x86_32.")
  .option('--allow-incompatible-update', "meteor - Allow packages in your project to be upgraded or downgraded to versions that are potentially incompatible with the current versions, if required to satisfy all package version constraints.")
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionBuild);

program
  .command('jarsigner [phase]')
  .description('jarsigner for android app')
  .option('--appname <appname>', 'gmeteor - appname')
  .option('--keystore <keystore>', 'gmeteor - keystore')
  .option('--storepass <storepass>', 'gmeteor - storepass')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionJarsigner);

program
  .command('zipalign [phase]')
  .description('zipalign for andoird app')
  .option('--apkpath <apkpath>', 'gmeteor - apkpath')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionZipalign);

program
  .command('gulp [task]')
  .description('gulp wrapper')
  .option('--production', "production mode")
  .option('--watch', "watch mode")
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionGulp);

program
  .command('mup [command]')
  .option('--phase <phase>', 'gmeteor - phase', rxSupportPhase, productionPhase)
  .option('-f', 'mup - forever')
  .option('-n <number>', 'mup - line number', parseInt)
  .description('mup wrapper')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionMup);

program
  .command('meteor [command]')
  .description('meteor wrapper')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionMeteor);

program
  .command('bower [command]')
  .description('bower wrapper')
  .allowUnknownOption(true)
  .action(isHelpMode ? _.noop : actionBower);

program
  .command('*', "", {noHelp: true})
  .action(function() {
    Logger.error('not found command');
    program.help();
    exit(1);
  });

if(!_.isUndefined(firstCommand) && firstCommand !== "create" && gmeteorLoadError) {
  Logger.error(gmeteorLoadError);
  return exit(1);
}

try {
  program.parse(process.argv);
} catch(ex) {
  if(isDebugMode) {
    Logger.error(util.inspect(ex, {depth: 4}));
  }
  return exit(1);
}

if(_.isUndefined(firstCommand) && !isHelpMode && !nconf.get("V") && !nconf.get("version")) {
  program.help();
}

function processMeteorBuild(phase, cb) {
  var settingsPath = getSettingsPath(phase);
  var server = getFullUrl(phase);
  var outputPath = getOutputPath(phase);

  var params = {
    outputPath: (nconf.get('directory') ? "--directory " : "") + outputPath
  };

  if(server) {
    params.server = "--server " + server;
  }

  var env = gmeteorJson.phase[phase].env || {};
  env.METEOR_SETTINGS = JSON.stringify(require(settingsPath));

  function convertEnvList(env) {
    var envList = "";
    _.forEach(env, function(value, key) {
      if(_.isString(value)) {
        value = value.replace(/"/g, "\\\"");
      }
      envList += key + "=" + value + "\n";
    });
    return envList;
  }

  var envList = convertEnvList(env);
  fs.writeFileSync(outputPath + "/env.list", envList);

  if(fs.existsSync(settingsPath)) {
    params.settings = "--mobile-settings " + settingsPath;
  }

  _.forEach(["architecture"], function(value) {
    if(nconf.get(value)) {
      params[value] = "--" + value + " " + nconf.get(value);
    }
  });

  _.forEach(["debug", "allow-incompatible-update"], function(value) {
    if(nconf.get(value)) {
      params[value] = "--" + value;
    }
  });

  var meteorExecStr = "meteor build";

  _.forEach(params, function(value, key) {
    meteorExecStr += " " + value;
  });

  shelljs.cd(getAbsolutePath(gmeteorJson.info.path.backend));
  Logger.debug("exec : " + meteorExecStr);
  Logger.time("meteor build");
  shelljs.exec(meteorExecStr, function() {
    Logger.timeEnd("meteor build");
    (cb || _.noop)();
  });
}

function actionZipalign(phase, options, cb) {
  phase = phase || gmeteorJson.info.production;

  if(!rxSupportPhase.test(phase)) {
    return Logger.error("check phase ex) " + supportPhase.join(", "));
  }

  var androidPath = getOutputPath(phase) + "/android";

  if(!fs.existsSync(androidPath)) {
    return Logger.error("first gmeteor build");
  }

  var zipalignPath = gmeteorJson.exec.zipalign;
  if(!zipalignPath) {
    return Logger.error("add exec zipalign path in gmeteor.json");
  }

  var execStr = zipalignPath + " -f 4 release-unsigned.apk " + getApkPath(phase);

  shelljs.cd(androidPath);

  var timeLabel = "zipalign " + phase;

  Logger.debug("exec : " + execStr);
  Logger.time(timeLabel);
  shelljs.exec(execStr, function() {
    Logger.timeEnd(timeLabel);
    (cb || _.noop)();
  });
}

function processMeteorRun(action, target, phase, cb) {
  action = action || "run";
  Logger.time("meteor " + action);
  var phaseInfo = gmeteorJson.phase[phase];

  var settingsPath = getSettingsPath(phase);
  var port = nconf.get("port") || phaseInfo.port || 3000;
  var params = {
    action: action || "run",
    target: target || ""
  };
  var rootUrl = getFullUrl(phase);

  if(fs.existsSync(settingsPath)) {
    params.settings = "--settings " + settingsPath;
  }

  if(port) {
    params.port = "--port " + port;
  }

  _.forEach(["mobile-server", "debug-port"], function(value) {
    if(nconf.get(value)) {
      params[value] = "--" + value + " " + nconf.get(value);
    }
  });

  _.forEach(["raw-logs", "production", "verbose", "no-lint", "allow-incompatible-update", "test"], function(value) {
    if(nconf.get(value)) {
      params[value] = "--" + value;
    }
  });

  var DISABLED_TEST_ENV = (nconf.get("enable-test") || phaseInfo.test) ? "" : _.map({
    "JASMINE_SERVER_UNIT": 0,
    "JASMINE_SERVER_INTEGRATION": 0,
    "JASMINE_CLIENT_UNIT": 0,
    "JASMINE_CLIENT_INTEGRATION": 0
  }, Utils.keyPlusValue).join(" ") + " ";

  var BASE_ENV = _.map(phaseInfo.env, Utils.keyPlusValue).join(" ") + " ";

  var CLI_ENV = _.map({ROOT_URL: rootUrl}, Utils.keyPlusValue).join(" ") + " ";

  var meteorExecStr = "meteor";

  _.forEach(params, function(value, key) {
    meteorExecStr += " " + value;
  });

  var execStr = DISABLED_TEST_ENV + BASE_ENV + CLI_ENV + meteorExecStr;

  shelljs.cd(getAbsolutePath(gmeteorJson.info.path.backend));
  Logger.debug("exec : " + execStr);
  shelljs.exec(execStr, function(code, output) {
    Logger.timeEnd("meteor " + action);
    cb();
  });
}

function processByCommand(exec, command, cb) {
  var execStr = exec + " " + command;
  Logger.time(execStr);
  Logger.debug("exec : " + execStr);
  shelljs.exec(execStr, function() {
    Logger.timeEnd(execStr);
    (cb || _.noop)();
  });
}

function processPreprocess(phase) {
  var mobileConfigJsPath = getAbsolutePath(gmeteorJson.info.path.deploy + "/" + phase + "/mobile-config.js");
  var backendPath = getAbsolutePath(gmeteorJson.info.path.backend);
  Logger.time("preprocess");
  if(fs.existsSync(mobileConfigJsPath)) {
    shelljs.cp("-f", mobileConfigJsPath, backendPath);
    Logger.log("copy : " + mobileConfigJsPath + " to : " + backendPath);
  }
  Logger.timeEnd("preprocess");
}

function getAbsolutePath(sourcePath) {
  if(sourcePath && sourcePath.indexOf("/") !== 0) {
    sourcePath = path.normalize(executeDirPath + "/" + sourcePath);
  }
  return sourcePath;
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if(!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream) {
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

function actionRun(command, target, options) {
  if(!_.isString(options.phase)) {
    return Logger.error("check phase ex) " + supportPhase.join(", "));
  }

  var watchMode = nconf.get("disable-watch") ? false : true;
  var timeLabel = "gmeteor " + command + " " + options.phase;
  Logger.time(timeLabel);
  processPreprocess(options.phase);
  processGulp(watchMode, nconf.get("production") || isProduction(options.phase));
  processMeteorRun(command, target, options.phase, function() {
    Logger.timeEnd(timeLabel);
  });
}

function actionBuild(phase, options) {
  phase = phase || gmeteorJson.info.production;

  if(!rxSupportPhase.test(phase)) {
    return Logger.error("check phase ex) " + supportPhase.join(", "));
  }

  var productionMode = nconf.get("disable-production") ? false : isProduction(phase);
  var timeLabel = "gmeteor build " + phase;
  Logger.time(timeLabel);

  async.series([
      function(callback) {
        processPreprocess(phase);
        callback();
      },
      function(callback) {
        processGulp(false, productionMode, callback);
      },
      function(callback) {
        processMeteorBuild(phase, callback);
      },
      function(callback) {
        if(nconf.get("android")) {
          actionJarsigner(phase, options, callback);
        } else {
          callback();
        }
      },
      function(callback) {
        if(nconf.get("android")) {
          actionZipalign(phase, options, callback);
        } else {
          callback();
        }
      }
    ],
    function(err, results) {
      Logger.timeEnd(timeLabel);
    });
}

function actionJarsigner(phase, options, cb) {
  phase = phase || gmeteorJson.info.production;

  if(!rxSupportPhase.test(phase)) {
    return Logger.error("check phase ex) " + supportPhase.join(", "));
  }

  var androidPath = getOutputPath(phase) + "/android";

  if(!fs.existsSync(androidPath)) {
    return Logger.error("first gmeteor build");
  }

  var params = {
    "appname": getAppName(phase),
    "keystore": getKeyStore(phase),
    "storepass": getStorePass(phase)
  };
  shelljs.cd(androidPath);

  var execStr = _.template("jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore <%=keystore%> -storepass <%=storepass%> release-unsigned.apk <%=appname%>")(params);
  var timeLabel = "jarsigner " + phase;
  Logger.time(timeLabel);
  Logger.debug("exec : " + execStr);
  shelljs.exec(execStr, function() {
    Logger.timeEnd(timeLabel);
    (cb || _.noop)();
  });
}

function actionDeploy(phase) {
  phase = phase || gmeteorJson.info.production;

  if(!rxSupportPhase.test(phase)) {
    return Logger.error("check phase ex) " + supportPhase.join(", "));
  }

  var productionMode = nconf.get("disable-production") ? false : isProduction(phase);
  var timeLabel = "gmeteor deploy " + phase;

  Logger.time(timeLabel);
  async.series([
      function(callback) {
        processPreprocess(phase);
        callback();
      },
      function(callback) {
        processGulp(false, productionMode, callback);
      },
      function(callback) {
        shelljs.cd(getAbsolutePath(gmeteorJson.info.path.deploy + "/" + phase));
        processByCommand("mup", "deploy", callback);
      }
    ],
    function(err, results) {
      Logger.timeEnd(timeLabel);
    });
}

function actionMup(command, options) {
  if(!_.isString(options.phase)) {
    return Logger.error("check phase ex) " + supportPhase.join(", "));
  }

  if(!_.isUndefined(options.N) && _.isNaN(options.N)) {
    return Logger.error("check -n <number value> ex) gmeteor mup -n 100");
  }

  shelljs.cd(getAbsolutePath(gmeteorJson.info.path.deploy + "/" + options.phase));
  var timeLabel = "mup wrapper " + options.phase;
  var exec = Utils.removeOption(process.argv.slice(2).join(" "), "--phase");
  Logger.debug(exec);
  Logger.time(timeLabel);
  shelljs.exec(exec, function() {
    Logger.timeEnd(timeLabel);
  });
}

/**
 *
 * @param {String} phase
 */
function actionSetup(phase) {
  phase = phase || gmeteorJson.info.production;

  if(!rxSupportPhase.test(phase)) {
    return Logger.error("check phase ex) " + supportPhase.join(", "));
  }

  shelljs.cd(getAbsolutePath(gmeteorJson.info.path.deploy + "/" + phase));
  var timeLabel = "gmeteor setup " + phase;
  Logger.time(timeLabel);
  processByCommand("mup", "setup", function() {
    Logger.timeEnd(timeLabel);
  });
}

function actionMeteor() {
  shelljs.cd(gmeteorJson.info.path.backend);

  Logger.time("meteor wrapper");
  shelljs.exec(process.argv.slice(2).join(" "), function() {
    Logger.timeEnd("meteor wrapper");
  });
}

function actionBower() {
  shelljs.cd(gmeteorJson.info.path.frontend);

  Logger.time("bower wrapper");
  shelljs.exec(process.argv.slice(2).join(" "), function() {
    Logger.timeEnd("bower wrapper");
  });
}

function actionGulp(task) {
  var execStr = getGulpExec(nconf.get("watch"), nconf.get("production"), task) + " " + process.argv.slice(4).join(" ");

  Logger.time("gulp");
  Logger.debug("exec : " + execStr);
  shelljs.exec(execStr, function(code, output) {
    Logger.timeEnd("gulp");
  });
}

/**
 *
 * @param {Boolean} isWatch
 * @param {Boolean} isProduction
 * @param {Function} cb
 */
function processGulp(isWatch, isProduction, cb) {
  check(isWatch, Boolean);
  check(isProduction, Boolean);
  check(cb, Match.Optional(Function));
  var execStr = getGulpExec(isWatch, isProduction);
  Logger.time("gulp");
  Logger.debug("exec : " + execStr);
  shelljs.exec(execStr, function(code, output) {
    Logger.timeEnd("gulp");
    (cb || _.noop)();
  });
}

function actionInstall() {
  Logger.time("gmeteor install");

  async.series([
    function(callback) {
      if(!shelljs.which("meteor")) {
        var commandExec = "curl https://install.meteor.com/ | sh";
        Logger.log("meteor not installed");
        Logger.time(commandExec);
        shelljs.exec(commandExec, function() {
          Logger.timeEnd(commandExec);
          callback();
        });
      } else {
        callback();
      }
    },
    function(callback) {
      async.eachSeries(["gulp", "bower", "mup"], function(value, callback) {
        if(!shelljs.which(value)) {
          var commandExec = "npm install -g " + value;
          Logger.log(value + " not installed");
          Logger.time(commandExec);
          shelljs.exec(commandExec, function() {
            Logger.timeEnd(commandExec);
            callback();
          });
        } else {
          callback();
        }
      }, callback);
    },
    function(callback) {
      var frontendPath = getAbsolutePath(gmeteorJson.info.path.frontend);
      if(!fs.existsSync(frontendPath + "/bower.json")) {
        Logger.error("not exist " + frontendPath + "/bower.json");
        callback();
      } else {
        shelljs.cd(frontendPath);
        Logger.time("bower install");
        shelljs.exec("bower install", function() {
          Logger.timeEnd("bower install");
          callback();
        });
      }
    }
  ], function(err) {
    Logger.timeEnd("gmeteor install");
  });
}


function getApkPath(phase) {
  return getAbsolutePath(nconf.get("apkpath") || gmeteorJson.phase[phase].apkPath || gmeteorJson.info.path.deploy + "/" + phase + "/" + getAppName(phase) + "-" + moment().format("YYYYMMDD_HHmmss") + ".apk");
}
function getAppName(phase) {
  return nconf.get("appname") || gmeteorJson.phase[phase].name || gmeteorJson.info.name;
}

function getSettingsPath(phase) {
  return getAbsolutePath(nconf.get("settings") || nconf.get("mobile-settings") || gmeteorJson.info.path.deploy + "/" + phase + "/settings.json");
}

function getKeyStore(phase) {
  return getAbsolutePath(nconf.get("keystore") || gmeteorJson.phase[phase].keystore);
}

function getStorePass(phase) {
  return nconf.get("storepass") || gmeteorJson.phase[phase].storepass || readlineSync.question('type storepass : ', {hideEchoBack: true});
}

/**
 *
 * @param {Boolean} isWatch
 * @param {Boolean} isProduction
 * @param {String} task
 * @returns {string}
 */
function getGulpExec(isWatch, isProduction, task) {
  check(isWatch, Match.Optional(Boolean));
  check(isProduction, Match.Optional(Boolean));
  check(task, Match.Optional(String));

  if(isWatch) {
    gulpExec += " --watch";
  }

  if(isProduction) {
    gulpExec += " --production";
  }

  return gulpExec + " " + (task || "");
}

function getOutputPath(phase) {
  return getAbsolutePath(nconf.get('directory') || gmeteorJson.phase[phase].outputPath || gmeteorJson.info.path.deploy + "/" + phase + "/.build");
}

function getFullUrl(phase) {
  var url = gmeteorJson.phase[phase].url;
  var port = nconf.get("port") || gmeteorJson.phase[phase].port || 3000;

  if(_.isNumber(port)) {
    return url + ":" + port;
  }

  return url;
}

function isProduction(phase) {
  return gmeteorJson.phase[phase].environment === "production";
}

function actionCreate(targetPath, options) {
  if(!targetPath) {
    return;
  }
  var destDir = targetPath.indexOf(path.sep) === 0 ? targetPath : path.normalize(executeDirPath + "/" + targetPath);
  var sourceDir = path.normalize(__dirname + "/../templates/*");

  if(!options.F && fs.existsSync(destDir)) {
    return Logger.error("folder exist!!");
  }

  var timeLabel = "gmeteor create " + targetPath;
  Logger.time(timeLabel);
  shelljs.cp('-fR', sourceDir, destDir);
  Logger.timeEnd(timeLabel);
}